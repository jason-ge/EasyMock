<Window x:Class="EasyMock.UI.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:EasyMock.UI"
        Name="MainWindowUI"
        Title="Easy Mock v1.1.1" Height="800" Width="1200">
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding WindowCloseCommand}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Window.Style>
        <Style TargetType="Window">
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsBusy}" Value="True">
                    <Setter Property="Cursor" Value="Wait" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Style>
    <Window.Resources>
        <ContextMenu x:Key="TreeViewItemContextMenu" x:Shared="False">
            <MenuItem Header="Add" 
                      Command="{Binding DataContext.AddMockNodeCommand, RelativeSource={RelativeSource AncestorType=Window}}" 
                      Visibility="{Binding DataContext.MockFileMenuItemVisibility, RelativeSource={RelativeSource AncestorType=TreeViewItem}}"
                      CommandParameter="{Binding}" />
            <MenuItem Header="Edit" 
                      Command="{Binding DataContext.EditMockNodeCommand, RelativeSource={RelativeSource AncestorType=Window}}" 
                      Visibility="{Binding DataContext.MockNodeMenuItemVisibility, RelativeSource={RelativeSource AncestorType=TreeViewItem}}"
                      CommandParameter="{Binding}"/>
            <MenuItem Header="Copy" 
                      Command="{Binding DataContext.CopyMockNodeCommand, RelativeSource={RelativeSource AncestorType=Window}}" 
                      Visibility="{Binding DataContext.MockNodeMenuItemVisibility, RelativeSource={RelativeSource AncestorType=TreeViewItem}}"
                      CommandParameter="{Binding}"/>
            <MenuItem Header="Paste" 
                      Command="{Binding DataContext.PasteMockNodeCommand, RelativeSource={RelativeSource AncestorType=Window}}" 
                      Visibility="{Binding DataContext.MockFileMenuItemVisibility, RelativeSource={RelativeSource AncestorType=TreeViewItem}}"
                      CommandParameter="{Binding}"/>
            <MenuItem Header="Remove" 
                      Command="{Binding DataContext.RemoveMockNodeCommand, RelativeSource={RelativeSource AncestorType=Window}}" 
                      CommandParameter="{Binding}" />
            <MenuItem Header="Refresh" 
                      Command="{Binding DataContext.RefreshMockNodeCommand, RelativeSource={RelativeSource AncestorType=Window}}" 
                      Visibility="{Binding DataContext.MockFileMenuItemVisibility, RelativeSource={RelativeSource AncestorType=TreeViewItem}}"
                      CommandParameter="{Binding}" />
            <MenuItem Header="Save" 
                      Command="{Binding DataContext.SaveMockNodeCommand, RelativeSource={RelativeSource AncestorType=Window}}" 
                      Visibility="{Binding DataContext.SaveMenuItemVisibility, RelativeSource={RelativeSource AncestorType=TreeViewItem}}"
                      CommandParameter="{Binding}"/>
        </ContextMenu>
        <Style x:Key="ModernMenuButton" TargetType="Button">
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="1">
                            <Border Padding="{TemplateBinding Padding}">
                                <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Center"/>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#91CAF5"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="#3399FF"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#91CAF5"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="#3399FF"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="#AAA"/>
                                <Setter TargetName="border" Property="Background" Value="#F7F7F7"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="#EEE"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
   </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="30"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="3*"/>
            <ColumnDefinition Width="5"/>
            <ColumnDefinition Width="7*"/>
        </Grid.ColumnDefinitions>
        <ToolBar Grid.Row="0" Grid.Column="0">
            <Button Command="{Binding NewMockFileCommand}" Content="New Mock File" Style="{StaticResource ModernMenuButton}" />
            <Separator />
            <Button Command="{Binding LoadMockFileCommand}" Content="Load Mock File" Style="{StaticResource ModernMenuButton}" />
            <Separator />
            <Button Command="{Binding LoadDevLogCommand}" Content="Load Log File" Style="{StaticResource ModernMenuButton}" />
        </ToolBar>
        <!-- Custom Menu Bar using StackPanel and Buttons -->
        <ToolBar Grid.Row="0" Grid.Column="2" VerticalAlignment="Stretch">
            <Button Content="Start Service" Style="{StaticResource ModernMenuButton}" Command="{Binding StartServiceCommand}"/>
            <Separator />
            <Button Content="Stop Service" Style="{StaticResource ModernMenuButton}" Command="{Binding StopServiceCommand}"/>
            <Separator />
            <Button Content="Clear Log" Style="{StaticResource ModernMenuButton}" Command="{Binding ClearLogCommand}"/>
            <Separator />
            <Button Content="Save Log" Style="{StaticResource ModernMenuButton}" Command="{Binding SaveLogCommand}"/>
        </ToolBar>

        <!-- TreeView Sidebar -->
        <TreeView Grid.Row="1" Grid.Column="0" x:Name="treeView" ItemsSource="{Binding RootNodes}">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseDoubleClick">
                    <i:InvokeCommandAction Command="{Binding TreeNodeDoubleClickCommand}" 
                                           CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType=TreeView}}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <TreeView.Resources>
                <HierarchicalDataTemplate DataType="{x:Type local:MockTreeNode}" ItemsSource="{Binding Children}">
                    <TextBlock Text="{Binding Header}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseRightButtonDown">
                                <i:InvokeCommandAction Command="{Binding DataContext.TreeNodeRightClickCommand, RelativeSource={RelativeSource AncestorType=Window}}" 
                               CommandParameter="{Binding}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </TextBlock>
                    <HierarchicalDataTemplate.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Header}" FontStyle="Italic">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="PreviewMouseRightButtonDown">
                                        <i:InvokeCommandAction Command="{Binding DataContext.TreeNodeRightClickCommand, RelativeSource={RelativeSource AncestorType=Window}}" 
                                       CommandParameter="{Binding}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </TextBlock>
                        </DataTemplate>
                    </HierarchicalDataTemplate.ItemTemplate>
                </HierarchicalDataTemplate>
            </TreeView.Resources>

            <TreeView.ItemContainerStyle>
                <Style TargetType="TreeViewItem">
                    <Setter Property="local:TreeViewItemHoveredBehavior.IsHovered" Value="{Binding IsHovered }" />
                    <Setter Property="local:TreeViewItemSelectedBehavior.IsSelected" Value="{Binding IsSelected, Mode=OneWay }" />
                    <Setter Property="FontWeight" Value="Normal"/>
                    <Setter Property="ContextMenu" Value="{StaticResource TreeViewItemContextMenu}"/>
                    <Setter Property="IsSelected" Value="{Binding IsSelected}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsNew}" Value="True">
                            <Setter Property="Foreground" Value="DarkGreen"/>
                            <Setter Property="FontWeight" Value="Bold"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsDirty}" Value="True">
                            <Setter Property="FontWeight" Value="Bold"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsErrorStatusCode}" Value="True">
                            <Setter Property="Foreground" Value="Red"/>
                            <Setter Property="FontWeight" Value="Bold"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsHovered}" Value="True">
                            <Setter Property="FontWeight" Value="Bold"/>
                            <Setter Property="Background" Value="Yellow"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </TreeView.ItemContainerStyle>
        </TreeView>

        <GridSplitter Grid.Row="0" 
                      Grid.Column="1"
                      Grid.RowSpan="2"
                      Width="5"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Stretch"
                      ShowsPreview="True" />

        <!-- Main Content Area -->
        <Border Grid.Row="1" Grid.Column="2" Margin="0,0,10,0" BorderBrush="#CCC" BorderThickness="1" CornerRadius="4" Background="White" >
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="8*" />
                    <RowDefinition Height="5" />
                    <RowDefinition Height="2*" />
                </Grid.RowDefinitions>
                <ScrollViewer Grid.Row="0" VerticalScrollBarVisibility="Auto">
                    <ItemsControl ItemsSource="{Binding RequestResponsePairs}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Expander Margin="4">
                                    <Expander.Header>
                                        <TextBox Text="{Binding Title, Mode=OneWay}"
                                            IsReadOnly="True"
                                            BorderThickness="0"
                                            Background="Transparent"
                                            Padding="0"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Stretch">
                                            <TextBox.Style>
                                                <Style TargetType="TextBox">
                                                    <Setter Property="FontWeight" Value="Normal"/>
                                                    <Setter Property="Foreground" Value="Black"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsErrorStatusCode}" Value="True">
                                                            <Setter Property="FontWeight" Value="Bold"/>
                                                            <Setter Property="Foreground" Value="Red"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBox.Style>
                                        </TextBox>
                                    </Expander.Header>
                                    <StackPanel>
                                        <TextBlock Text="Headers:" FontWeight="Bold" Margin="0,0,0,2"/>
                                        <TextBox Text="{Binding Headers}"
                                                 IsReadOnly="True"
                                                 TextWrapping="NoWrap"
                                                 Background="#F7F7F7"
                                                 Margin="10,0,0,6"
                                                 MaxHeight="250"
                                                 HorizontalAlignment="Stretch"
                                                 VerticalScrollBarVisibility="Auto"
                                                 HorizontalScrollBarVisibility="Auto"/>
                                        <TextBlock Text="Request:" FontWeight="Bold" Margin="0,0,0,2"/>
                                        <TextBox Text="{Binding RequestBody}"
                                                 IsReadOnly="True"
                                                 TextWrapping="NoWrap"
                                                 Background="#F7F7F7"
                                                 Margin="10,0,0,6"
                                                 MaxHeight="250"
                                                 HorizontalAlignment="Stretch"
                                                 VerticalScrollBarVisibility="Auto"
                                                 HorizontalScrollBarVisibility="Auto"/>
                                        <TextBlock Text="Response:" FontWeight="Bold" Margin="0,0,0,2"/>
                                        <TextBox Text="{Binding ResponseBody}"
                                                 IsReadOnly="True"
                                                 TextWrapping="NoWrap"
                                                 Background="#FFFBEA"
                                                 Margin="10,0,0,6"
                                                 MaxHeight="250"
                                                 HorizontalAlignment="Stretch"
                                                 VerticalScrollBarVisibility="Auto"
                                                 HorizontalScrollBarVisibility="Auto">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="MouseEnter">
                                                    <i:InvokeCommandAction Command="{Binding DataContext.ResponseBodyMouseEnterCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                                                           CommandParameter="{Binding}" />
                                                </i:EventTrigger>
                                                <i:EventTrigger EventName="MouseLeave">
                                                    <i:InvokeCommandAction Command="{Binding DataContext.ResponseBodyMouseLeaveCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                                                           CommandParameter="{Binding}" />
                                                </i:EventTrigger>
                                                <i:EventTrigger EventName="MouseDoubleClick">
                                                    <i:InvokeCommandAction Command="{Binding DataContext.TreeNodeDoubleClickCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                                                           CommandParameter="{Binding MockNodeSource}" />
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                        </TextBox>
                                    </StackPanel>
                                </Expander>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </ScrollViewer>
                <GridSplitter Grid.Row="1" 
                              Height="5"
                              HorizontalAlignment="Stretch"
                              VerticalAlignment="Center"
                              ShowsPreview="True"/>
                <TextBox Grid.Row="2"
                         Text="{Binding LogOutput, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                         IsReadOnly="True"
                         TextWrapping="Wrap"
                         VerticalScrollBarVisibility="Auto"
                         HorizontalScrollBarVisibility="Auto"
                         Background="#F7F7F7"
                         FontFamily="Consolas"
                         BorderBrush="#CCC"/>
            </Grid>
        </Border>
    </Grid>
</Window>
